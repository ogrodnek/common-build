# values in here are overriden by build.properties and project.properties in
# individual projects, and build.properties in this dir, in that order

# Override these in your build.properties
#org.name=
#org.package.prefix=

# default wildcard for finding JUnit tests
# the convention is that our JUnit test classes have XXXTests-style names
test.includes=**/*Test.class,**/*Tests.class

# wildcards to exclude among JUnit tests
test.excludes=**/Abstract*

# test property set when tests fail
test.failed.property=tests.failed

# we define standard directory locations here
# these should not normally never have to be overriden
# we define them here instead of in the XML so that Ant nested property
# replacement can work for properties overrides by other properties files

# root of any bin files needed during build
bin.dir=${basedir}/bin

# libs needed for build process. ivy pulls down jars into various dirs under here
lib.dir=${basedir}/lib

# any static libs that need to be checked in instead of being pulled down by ivy
# should be placed somehwere under here. The standard build doesn't touch this though
static.lib.dir=${basedir}/static-lib

# root of sources hierarchy
src.dir=${basedir}/src

# main sources
src.java.main.dir=${src.dir}/main/java
src.scala.main.dir=${src.dir}/main/scala

# test sources
src.java.test.dir=${src.dir}/test/java
src.scala.test.dir=${src.dir}/test/scala

# root of web-apps sources
src.web.dir=${basedir}/src/main/webapp

# root of source doc files
src.doc.dir=${basedir}/src/doc

# root of etc hierarchy, typically used for templated sources and config files
src.etc.dir=${basedir}/src/etc

# resources get copied into target classes dir with filtering
src.resources.dir=${src.dir}/main/resources
src.dtd.dir=${src.etc.dir}/dtd
src.tld.dir=${src.etc.dir}/tld

# test resources get copied into target test classes dir with filtering
src.test.resources.dir=${src.etc.dir}/test-resources

# root of build hierarchy
target.dir=${basedir}/target
  	
# any generated java sources go here
target.gen.java.dir=${target.dir}/gen-java-src
target.gen.java.test.dir=${target.dir}/gen-java-test-src
  	
# where built source class files and resources go
target.classes.dir=${target.dir}/classes

# where built test class files and resources go
target.testclasses.dir=${target.dir}/test-classes
  	
# where test results end up
target.testresults.dir=${target.dir}/test-reports

# where JavaDoc generate files go
target.javadocs.dir=${target.dir}/javadocs
  	
# where J2SE/J2EE modules (.jar, .war, .ear) go
target.artifacts.dir=${target.dir}/artifacts

# where target lib archives (.JARs) go
target.lib.dir=${target.artifacts.dir}/lib

# where WAR archive goes
target.artifacts.war.dir=${target.artifacts.dir}/war
  	
# where EAR archive goes
target.artifacts.ear.dir=${target.artifacts.dir}/ear

# where any exploded web-app goes
target.war.expanded.dir=${target.artifacts.dir}/war-expanded
    	
# where any exploded EAR goes
target.ear.expanded.dir=${target.artifacts.dir}/ear-expanded

# Specific war location
project.webapp.name=${ant.project.name}
project.war=${target.artifacts.war.dir}/${project.webapp.name}.war

# file used to provide token filter values during text file copies
target.filter.file=${target.dir}/filter.properties

# where all project documentation resides
docs.dir=${basedir}/docs

# where all project reference documentation resides
docs.ref.dir=${docs.dir}/reference

# where all project reference documentation sources reside
docs.ref.src.dir=${docs.dir}/reference/src

# where all DocBook libraries reside
docs.ref.lib.dir=${docs.dir}/reference/lib

# where the project reference documentation is built
docs.ref.target.dir=${docs.dir}/reference/target

# where all project upgrade documentation resides
docs.upgrade.dir=${docs.dir}/upgrade

# where all project upgrade documentation sources reside
docs.upgrade.src.dir=${docs.dir}/upgrade/src

# where the project upgrade documentation is built
docs.upgrade.target.dir=${docs.dir}/upgrade/target

# where the dist target is saved
dist.dir=${target.dir}/dist

# sample: set proper packages here, for javadocs
packages=stub.*

# override default ivy retrieve pattern to include configuration name in path, and no
# revision number The main advantage of no revision number in the name is that when pulling
# down subsequent snapshots of the same jar, a newer one will just overwrite a previous
# version. This means we are not forced to clean the lib dir between retrieves.
ivy.retrieve.pattern=${lib.dir}/[conf]/[artifact].[ext]

# To add the revision, comment out the previous, and add next 2 to build.properties
# clear.libs.before.retrieve=anything
# ivy.retrieve.pattern=${lib.dir}/[conf]/[artifact]-[revision].[ext]

# now define patterns for special retrieve used to build repo for release
release.repo.ivy.retrieve.pattern=[organisation]/[module]/[revision]/[artifact]-[revision].[ext]
release.repo.ivy.retrieve.ivy.pattern=[organisation]/[module]/ivy-[revision].xml

# override default ivy distrib dir to go under targets
ivy.distrib.dir=${target.dir}/dist
# override where ivy.xml files are placed, so they are hierarchical and are safe
# to merge from multiple projects
ivy.srcivypattern=${ivy.distrib.dir}/ivys/[organisation]/[module]/ivy-[revision].xml

# Location where temporary data goes. Only used for Oracle-specific create-user script
# needs to be customized for the user if location is not appropriate, or always for unix
data.dir=c:\\temp

# Location of the checkstyle configuration file
checkstyle.config.locations=${common.build.dir}/resources/checkstyle/base_checks.xml,${common.build.dir}/resources/checkstyle/metrics_checks.xml
checkstyle.report.location=${target.dir}/checkstyle

# AWS info
aws.access.key.id=
aws.secret.access.key=

# App Engine Info
ae.username=

# AspectJ Aspect Path - set to empty just so it's defined and the aspectj stuff won't generate a warning
# Override as necessary in the actual project's project.properties file
aspectPath=

# Configure junit forkmode
junit.forkmode=perBatch
