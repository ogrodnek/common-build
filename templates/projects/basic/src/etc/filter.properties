# $Header$

# Contains filterable project settings.  Setting placeholders in filterable project text
# files will be replaced with these values when the 'statics' build target is run.
#
# You may add static settings directly to this source file in the format:
#    setting=value  e.g MY_SETTING=myvalue
# This is appropriate usage if you know the setting value will never change.
#
# At build time this source file is copied to the ${target.dir} where additional 
# dynamic settings may be appended using the <propertyfile> task.  Use this approach
# when a setting value depends on the build or the local user's environment.
#
# An example of this approach is shown below:
#
# build.xml
# <target name="build.prepare" depends="common-targets.build.prepare">
#   <!-- Append additional local settings that are applicable to this project -->
#  	<propertyfile file="${target.filter.file}">
#  		 <!-- key=the name of the setting
#             value=the property in your build.properties file that has the local setting value -->
#  	     <entry key="MY_LOCAL_SETTING" value="${my.local.setting}" />
#  	</propertyfile>
# </target>
#
# This allows for dynamic replacement values that are sourced from local properties files to facilitate
# local user settings.
#
# To refer to filterable settings within project source files like config files, JSPs, or
# other text files use the standard ant placeholder format:
#     @SETTING_NAME@ e.g, @MY_SETTING@ and @MY_LOCAL_SETTING@
#
# Your settings:
